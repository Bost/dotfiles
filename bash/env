#!/usr/bin/env bash

# debugging:
# set -x
# stop on error:
# set -e

# setup paths and system variables

# values used by other sripts and applications
local uname=$(uname -a)
#echo uname: $uname

local nodeName=$(uname --nodename)
#echo nodeName: $nodeName

local osName=$(uname --operating-system) # returns GNU/Linux or Cygwin
#echo osName: $osName

#local kernelName=$(uname --kernel-name)  # returns Linux
#echo kernelName: $kernelName

export isLinux=$(expr match "$osName" "GNU/Linux")
#exit
# TODO clean definition of isLinux_64
export isLinux_64=0
export isLinuxNew64=$(expr match "$nodeName" "bost-new-64")
export isLinuxFranzi=$(expr match "$nodeName" "franzi")
export isLinuxMartinJV=$(expr match "$nodeName" "martin-jv")
export isLinuxMartin=$(expr match "$nodeName" "bost-martin")
export isLinuxBambi=$(expr match "$nodeName" "bambi-small")
export isLinuxVB=$(expr match "$nodeName" "rsvoboda-VirtualBox")

# TODO create a hashmap with machines

#echo isLinux: $isLinux
#echo isLinux_64: $isLinux_64
#echo isLinuxNew64: $isLinuxNew64
#echo isLinuxFranzi: $isLinuxFranzi
#echo isLinuxMartin: $isLinuxMartin
#echo isLinuxMartinJV: $isLinuxMartinJV
#echo isLinuxBambi: $isLinuxBambi
#echo isLinuxVB: $isLinuxVB

function add_to_path() {
    new_entry=$@
    case ":$PATH:" in
	*":$new_entry:"*) :;; # already there
	*) PATH="$new_entry:$PATH";; # or PATH="$PATH:$new_entry"
    esac
}

# TODO function add_to() doesn't work with sysvar reference
# function add_to() {
#     local sysvar=$1
#     local new_entry=$1
#     case ":$sysvar:" in
# 	*":$new_entry:"*) :;; # already there
# 	*) sysvar="$var:$new_entry";;
#     esac
# }

#echo "### Display no message in the console if doing scp"
export dev=$HOME/dev
# export music=$HOME/music
# export down=$HOME/downloads
export clt=$dev/LightTable

local bits=$(getconf LONG_BIT)
export isLinux_64=$(($bits == 64))

# TODO set paths to Google App Engine, Oracle JDK: ~/gae/appeng-python-1.8
# export CLOJURESCRIPT=$dev/clojurescript
# add_to_path $CLOJURESCRIPT/bin
add_to_path $HOME/bin
#add_to $PATH $CLOJURESCRIPT/bin

if [ -n "${DISPLAY+x}" ]; then # check if there is a display available
    # remaping the Esc key to Capslock (I don't use it that much)
    xmodmap -e 'clear Lock' -e 'keycode 0x42 = Escape'
fi

export PATH

# change the .history file mode to append
shopt -s histappend

# run at each shell prompt; -a: write immediately the current/new lines to the history file

new_entry="history -a"
case ";$PROMPT_COMMAND;" in
    *";$new_entry;"*)
	# echo "PROMPT_COMMAND already contains: $new_entry"
	:;;
    *)
	PROMPT_COMMAND="$new_entry;$PROMPT_COMMAND"
	# echo "PROMPT_COMMAND does not contain: $new_entry"
	;;
esac

# fancy prompts might be too slow for largers git repos
if [ $isLinuxFranzi -gt 0 ] || [ $isLinuxNew64 -gt 0 ]; then
    # readFile $bash_files/prompt
    readFile $bash_files/prompt-sexy

    # Set config variables first
    GIT_PROMPT_ONLY_IN_REPO=1

    # as last entry source the gitprompt script
    readFile $bash_files/bash-git-prompt/gitprompt.sh

elif [ $isLinuxVB -gt 0 ]; then
    # readFile $bash_files/prompt-sexy
    : # use predefined bash prompt - see echo $PS1
else
    readFile $bash_files/prompt
    #readFile $bash_files/prompt-sexy
    : # use predefined bash prompt - see echo $PS1
fi

# HACK: when starting emacs - get rid of the warning
# WARNING **: Couldn't connect to accessibility bus: Failed to connect to socket 
export NO_AT_BRIDGE=1

# TODO # Set git to use the credential memory cache
# TODO git config --global credential.helper cache
# TODO # To change the default password cache timeout, enter the following:
# TODO git config --global credential.helper 'cache --timeout=3600'
