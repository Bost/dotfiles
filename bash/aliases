#!/bin/bash -e

Reload() {
    echo source $HOME/.bashrc
         source $HOME/.bashrc
}
alias reload=Reload
alias r=Reload
alias t=tail

alias clean-workspace='METADA_CORE=.metadata/.plugins/org.eclipse.jdt.core; rm -rf .metadata/.plugins/org.eclipse.core.resources/.history; rm $METADA_CORE/*.index $METADA_CORE/savedIndexNames.txt'
alias unexport='unset'
alias envp='env | grep ^PATH='

alias v='vim'

alias cls='clear'

# use pgreg under linux
PsEfGrep() {
    echo "ps -ef | grep $@"
          ps -ef | grep $@
}
alias prep=PsEfGrep

ExtractBashComments() {
    egrep "^#"
# Usage:
# cat myscript.sh | ExtractBashComments | wc 
# comments=$(ExtractBashComments < myscript.sh)
}

TestConnectivity() {
    #echo ping -c 5 www.google.com
         #ping -c 5 www.google.com
    echo mtr google.com
         mtr google.com
}
alias png=TestConnectivity
alias mtrg=TestConnectivity

alias c='cat'
alias less='less -r'
#alias rm='rm -i'
alias whence='type -a'
#alias ls='ls --color=auto'
alias dir='ls --color=auto --format=vertical'
#alias dir='dir --color=auto'
alias vdir='ls --color=auto --format=long'
#alias vdir='vdir --color=auto'

alias ..='cd ..'
alias ...='cd ../..'
alias cdd='cd -'

GitAddAll () {
    echo git add .
         git add .
}
alias gdd=GitAddAll
alias gg='git gui &'
alias gtg='git tag'
alias gtag='git tag'

GitBranch () {
    echo git branch $@
         git branch $@
}
alias gbr=GitBranch

GrepFind () {
    echo "grep -lir '$1' \`find . -name '*.$2'\`"
    echo "###"
    if [ $# -eq 2 ] ; then
        foundFiles=$(find . -name \*.$2)
        # echo "foundFiles: "$foundFiles
        grep -lir $1 $foundFiles
    fi
}
alias gf=GrepFind

#GitRebaseContinue() {
    #git fetch # can never fail with a conflict
    #git ff    # tries to fast-forward
    ## if fast-forward fails, then
    #git rebase origin/upstreambranch

    # --continue: conflict resolving per commit basis not everything-at-once
#    echo git rebase --continue
#         git rebase --continue
    # use: 'git rebase --abort && git pull' if 'git rebase --continue' fails then use:

    # you can set up your git config to always rebase when pulling.
    #   git config master.rebase true
    # sets it up for master of the current repo
    #   git config --global branch.autosetuprebase always
#}

GitRebase() {
    echo git rebase $@
         git rebase $@
}

alias gr='GitRebase'
alias grc='GitRebase --continue'
alias gri='GitRebase --interactive'
alias gra='GitRebase --abort'

#alias gdf='git diff'
#alias gp='git push'

GitPush() {
    # i.e. push to origin
    echo git push $@
         git push $@
}
alias gh=GitPush
alias gho=GitPush

GitBisect() {
    # i.e. push to origin
    echo git bisect $@
         git bisect $@
}
alias gbb='GitBisect bad'
alias gbg='GitBisect good'

GitLog() {
    # Visualise git log (like gitk, in the terminal)
    #fmt=%x1b[31m%h%x09%x1b[32m%d%x1b[0m%x20%s
    fmt='%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'
    echo git log --graph --full-history --all --color --pretty=format:"$fmt"
         git log --graph --full-history --all --color --pretty=format:"$fmt"   # --abbrev-commit"
}
alias gl=GitLog

GitKAll() {
    echo "gitk --all &"
          gitk --all &
}
alias gitk=GitKAll
alias gk=GitKAll

GitSearchStr () {
    # Search for a string in all revisions of entire git history
    git rev-list --all | (
        while read revision; do
            #git grep -F 'Your search string' $revision
            git grep -F '$1' $revision
        done
    )
}
alias gstr=GitSearchStr

# ltree: colored tree with 'less'. --RAW-CONTROL-CHARS == -R
ltree () {
    tree -C $* | less --RAW-CONTROL-CHARS
}

# TODO TreeNonIgnored should take .gitignore as input
TreeNotIgnored () {
    echo "tree | grep -v 'class\|.*~'"
          tree | grep -v 'class\|.*~'
}
alias trn=TreeNotIgnored
alias tn=TreeNotIgnored

findreplace () {
    printf "Search: ${1}\n"
    printf "Replace: ${2}\n"
    printf "In: ${3}\n\n"

    find . -name "*${3}" -type f | xargs perl -pi -e 's/${1}/${2}/g'
}

extract() {
    if [ -f $1 ] ; then
      case $1 in
        *.tar.bz2)
              echo tar xjf $1
                   tar xjf $1
              ;;
        *.tar.gz)
              echo tar xzf $1
                   tar xzf $1
              ;;
        *.bz2)
              echo bunzip2 $1
                   bunzip2 $1
              ;;
        *.rar)
              echo un
                   unrar e $1
              ;;
        *.gz)
              echo gunzip $1
                   gunzip $1
              ;;
        *.tar)
              echo tar xf $1
                   tar xf $1
              ;;
        *.tbz2)
              echo tar xjf $1
                   tar xjf $1
              ;;
        *.tgz)
              echo tar xzf $1
                   tar xzf $1
              ;;
        *.zip)
              echo unzip $1
                   unzip $1
              ;;
        *.Z)
              echo uncompress $1
                   uncompress $1
              ;;
        *.7z)
              echo 7z x $1
                   7z x $1
              ;;
        *)     echo "'$1' cannot be extracted via extract()" ;;
        esac
     else
         echo "'$1' is not a valid file"
     fi
}

findTextInAnyFile () {
    echo find . -name "$2" -exec grep -il "$1" {} \;
         find . -name "$2" -exec grep -il "$1" {} \;
}
alias ft=findTextInAnyFile

# create a directory and change into it
mkdirAndCd() {
  echo mkdir -p "$1"
       mkdir -p "$1"
  echo cd "$1"
       cd "$1"
}
alias mcd=mkdirAndCd
alias take=mkdirAndCd

LeinCljsbuildClean() {
    echo lein cljsbuild clean
         lein cljsbuild clean
}
alias lcc='LeinCljsbuildClean'

LeinCljsbuildAuto() {
    echo lein cljsbuild auto
         lein cljsbuild auto
}
alias lca='LeinCljsbuildAuto'
alias lcca='LeinCljsbuildClean && LeinCljsbuildAuto'

GitPullOrigin() {
    echo 'git pull --rebase origin && git fetch --tags'
          git pull --rebase origin && git fetch --tags
}
alias glo=GitPullOrigin

GitPullUpstream() {
    echo 'git pull --rebase upstream master'
          git pull --rebase upstream master
}
alias glu=GitPullUpstream

GitPullOriginRepo() {
    echo 'cd '$1' && GitPullOrigin'
          cd  $1  && GitPullOrigin
}

GitUpdateAll() {
    _cd=`pwd`
    echo 'pwd: '$_cd
    GitPullOriginRepo $dev/cheatsheet && GitPullOriginRepo $dev/dotfiles
    if [ "$isCygwin_155" -gt 0 ]; then
        GitPullOriginRepo /cygdrive/h/dev/cheatsheet && GitPullOriginRepo /cygdrive/h/dev/dotfiles
    fi
    cd $_cd
}
alias ga=GitUpdateAll
alias gua=GitUpdateAll

GitPushRepo() {
    echo 'cd '$1' && git push'
          cd  $1  && git push
}

GitPushAll() {
    _cd=`pwd`
    echo 'pwd: '$_cd
    GitPushRepo $dev/cheatsheet && GitPushRepo $dev/dotfiles
    cd $_cd
}
alias gha=GitPushAll
#gpl_dotfiles='echo "$dev/dotfiles"; cd $dev/dotfiles && git pull'
#alias gps='cd $dotfilesHOME/vim-pathogen && git submodule foreach git pull origin master'

GitClone() {
    echo git clone $@
         git clone $@
}
alias gcl=GitClone

alias gau='git add --update'
alias gss='git status --short'

GitStatus() {
    echo git status $@
         git status $@
}
alias gst=GitStatus

GitCheckout() {
    echo git checkout $@
         git checkout $@
}
alias gco=GitCheckout

GitCommit() {
    echo git commit $@
         git commit $@
}
alias gci=GitCommit

GitResetHard() {
    echo git reset --hard
         git reset --hard
}
alias grh=GitResetHard

#alias gdm='git diff master'
#alias gd='git diff | mate'
#alias gnp='git-notpushed'
#alias grm='git status | grep deleted | awk '

alias sc='script/console'
alias h='history'

HistoryGrep() {
    echo "history | grep $@"
          history | grep $@
}
alias hrep=HistoryGrep

AliasGrep() {
    echo "alias | grep $@"
          alias | grep $@
}
alias arep=AliasGrep

#alias tu='top -o cpu'
#alias tm='top -o vsize'
#alias r='rake'
#alias mkdir='nocorrect mkdir'
#alias cp='nocorrect cp'
alias md='mkdir -p'
#alias mv='nocorrect mv'
#alias where='command -v'
#alias ff='open -a Firefox'
#alias o='open . &'
#alias less='less -R'

#alias cp='cp -i'
#alias mv='mv -i'

# example:
# alias cvs-reset='cvs update -C -l -d -P "mbsgui/src/de/alldata/mbsgui/base/plugins/CreditKeyList.java" "mbsgui/src/de/alldata/mbsgui/base/plugins/CreditKeyList.java"'
alias cvs-reset='cvs update -C -l -d -P '
alias less='less -r'

# type: Display information about command type
alias whence='type -a'
alias dir='ls --color=auto --format=vertical'
alias vdir='ls --color=auto --format=long'

alias l="ls -lAh --color"    # -A does not print the . and .. entries
alias ll="ls -lA --color"
# show hidden files
alias l.='ls -d .* --color=auto'
#alias ls='ls -F --color=tty'
#alias l='ls -lAh'
#alias ls='ls -G'
#alias ls='ls -F --color=tty'
#alias ll='ls -lh'
#alias ll='ls -l'
#alias l='ls -CF'
#alias la='ls -A'

FindFile () {
    echo find $@
         find $@
}
alias f=FindFile

ChmodExec () {
    echo chmod +x $@
         chmod +x $@
}
alias cx=ChmodExec

#alias cp='cp -i'
#alias mv='mv -i'
#alias grep='grep --color'

if [ "$isLinux" -gt 0 ]; then
    :
    if [ "$isLinux_64" -gt 0 ]; then
        export VMAIL_BROWSER='google-chrome'
    else
        export VMAIL_BROWSER='chromium-browser'
    fi

    alias lock="xflock4"
    UpdateUpgradeClean() {
        echo "sudo apt-get update && sudo apt-get upgrade --yes && sudo apt-get clean"
              sudo apt-get update && sudo apt-get upgrade --yes && sudo apt-get clean
    }
    alias u=UpdateUpgradeClean

    DistUpgrade() {
        echo "sudo apt-get dist-upgrade --yes"
              sudo apt-get dist-upgrade --yes
    }
    alias d=DistUpgrade

    alias k9='kill -9'
    # I guess '2> /dev/null' redirects errors to /dev/null
    #alias f='find ./ 2> /dev/null'

    # -y  Assume Yes to all queries and do not prompt
    alias inst="sudo apt-get install -y"
    alias uninst="sudo apt-get remove -y"
    alias rmv="sudo apt-get remove -y"
    alias armv="sudo apt-get autoremove -y"

    reBoot() {
        echo 'sudo reboot'
              sudo reboot
    }
    alias reboot=reBoot

    DoSuspend() {
        echo 'sudo pm-suspend'
              sudo pm-suspend
    }
    #alias s=DoSuspend
    alias susp=DoSuspend
    alias suspend=DoSuspend

    DoHibernate() {
        echo 'sudo pm-hibernate'
              sudo pm-hibernate
    }
    #alias h=DoHibernate
    alias hib=DoHibernate
    alias hibernate=DoHibernate

    shutDown() {
        echo 'sudo shutdown -h now'
              sudo shutdown -h now
    }
    alias shut=shutDown
    alias shutdown=shutDown

    #Search the package list for a regex pattern
    #TODO alias sea='apt-cache search'

    RunClojure() {
        echo java -cp $cljcp clojure.main
             java -cp $cljcp clojure.main
    }
    alias clojure=RunClojure
    RunGvim() {
        #echo gvim -c "call Maximize_Window()"
             #gvim -c "call Maximize_Window()"
        #echo gvim -c "call Maximize_Window()" --remote-silent
             #gvim -c "call Maximize_Window()" --remote-silent
        # !* - all args of the last command
        echo "gvim '$*' &"
              gvim  $*  &
    }
    alias tmp='cd /tmp'
elif [ "$isCygwin_155" -gt 0 ]; then
    :
    #echo "### isCygwin_155: $isCygwin_155 ==> Loading $strCygwin_155"

    RunGvim() {
        echo "gvim '$*' &"
              gvim  $*  &
    }
    RunClojureCygpath() {
        echo java -cp `cygpath -p -w $cljcp` clojure.main
             java -cp `cygpath -p -w $cljcp` clojure.main
    }
    alias clojure=RunClojureCygpath
elif [ "$isMinGw32_155" -gt 0 ]; then
    :
    #echo "### isMinGw32_155: $isMinGw32_155 ==> Loading $strMinGw32_155"

    RunGvim() {
        echo "gvim -u $HOME/dev/dotfiles/vimrc '$*' &"
              gvim -u $HOME/dev/dotfiles/vimrc  $*  &
    }
    #alias clojure='$winapp/clojure-1.4.0/clojure.sh'
elif [ "$isMinGw32_app1" -gt 0 ]; then
    :
    #echo "### isMinGw32_app1: $isMinGw32_app1 ==> Loading $strMinGw32_app1 aliases"

    alias clojure='java -cp $winapp/clojure-1.4.0/clojure-1.4.0.jar clojure.main'
else
    echo "ERROR: No environment detected"
fi

if [ "$isLinux" -eq 0 ]; then
    :
    #echo "### isLinux: $isLinux ==> Loading non-linux aliases"

    alias c:='cd $base/c'
    alias d:='cd $base/d'
    alias q:='cd $qDrive'

    alias rosv='cd $rosv'
    #alias conf='cd $rosv/mbs/conf'
    alias deployments='cd $deployments_mce'
    #alias scl='cd $dev/scl-directory'

    alias dem='cd $dev/mbs/dem'
    alias mce='cd $dev/mbs/mce'
    alias std='cd $dev/mbs/std'
    #alias bmw='cd $dev/mbs/bmw'
    #alias mbb='cd $dev/mbs/mbb'

    alias credit='cd $dev/credit.head'
    alias full='cd $dev/jacarta.full'
    alias light='cd $dev/jacarta.light'
    alias hre='cd $dev/jacarta.hre'
    #alias pfandbrief='cd $dev/pfandbrief'

    #alias services='cd $dev/xml-services'
    #alias xml='cd $dev/xml-services'

    #alias prod='echo ssh rsvoboda@172.17.31.184; ssh rsvoboda@172.17.31.184'
    #alias abnt='echo ssh rsvoboda@172.17.31.185; ssh rsvoboda@172.17.31.185'
    alias prod='echo ssh rsvoboda@194.99.105.205; ssh rsvoboda@194.99.105.205'
    alias abnt='echo ssh rsvoboda@194.99.105.206; ssh rsvoboda@194.99.105.206'

    alias mbssum='$deployments_base/mbssum.sh'

    alias depl='mkdir -p $deployments_full/lib && mkdir -p $deployments_full/deploy; ls -la $deployments_full/..'
    alias tmp='cd $HOME/tmp/'

    alias music='cd $HOME/music/'
    alias y='echo ">>> youtube-dl istalled manually - check for system updates <<<";$HOME/bin/youtube-dl'
    alias m='mplayer'
#else
#    echo "Linux aliases already loaded"
fi

cljcp=$clojureJarFile
cljcp=$cljcp:$dev/clojure-contrib/math.combinatorics-0.0.3.jar
cljcp=$cljcp:$dev/clojure-contrib/algo.monads-0.1.4.jar
cljcp=$cljcp:$dev/clojure-contrib/tools.macro-0.1.1.jar
cljcp=$cljcp:$dev/clojure-contrib/data.priority-map-0.0.2.jar
cljcp=$cljcp:$dev/clojure-contrib/core.cache-0.6.3.jar
cljcp=$cljcp:$dev/clojure-contrib/core.memoize-0.5.5.jar
cljcp=$cljcp:$dev/vimclojure-server/server-2.3.6.jar

alias g=RunGvim
# this is a rather speculative $home location :)
alias home='cd $dev/..'

alias desktop='cd $HOME/Desktop'
alias desk='desktop'

alias downloads='cd $HOME/Downloads'
alias down='downloads'
alias catg='cd $HOME/downloads/category-theory/js'

alias cheatsheet='cd $dev/cheatsheet'
alias cheat='cheatsheet'

alias dotfiles='cd $dev/dotfiles'
alias dotf='dotfiles'
#alias dot='dot'  " /usr/bin/dot  filter for drawing directed graphs

alias hoch='cd $dev/hochzeit'
alias trackle='cd $dev/trackle'
alias zark='cd $dev/zark'
alias foo='cd $dev/foo'
alias dev='cd $dev'
RunEmacs() {
    echo "emacs $@ &"
          emacs $@ &
}
alias e=RunEmacs
alias ea='RunEmacs $dev/dotfiles/bash/aliases'
alias ee='RunEmacs $dev/dotfiles/bash/env'

# Show which commands you use the most
alias freq='cut -f1 -d" " ~/.bash_history | sort | uniq -c | sort -nr | head -n 30'

# Clear terminal and empty scrollback
alias wipe='printf "\ec"'

alias sulast='sudo $(history -p !-1)'
#alias refunction='$EDITOR ~/.bash_functions && source ~/.bash_functions'

GeneratePassw() {
    #echo read -s pass; echo $pass | md5sum | base64 | cut -c -16
         #read -s pass; echo $pass | md5sum | base64 | cut -c -16
    # 30 character password
    echo "strings /dev/urandom | grep -o '[[:alnum:]]' | head -n 8 | tr -d '\n'; echo"
          strings /dev/urandom | grep -o '[[:alnum:]]' | head -n 8 | tr -d '\n'; echo
}
alias genpasswd=GeneratePassw
# TODO is this for passing param to an alias?
#alias 'ps?'='ps ax | grep '

alias ltt='$dev/LightTable/deploy/LightTable &'
alias clt='cd $dev/LightTable'
# too many lct typos
alias lct='cd $dev/LightTable'
alias lt='ls -lat'
alias ltr='ls -latr'
alias lff='ls -lrt -d -1 $PWD/{*,.*}'
alias lT='ls -latr'

# create alias file for the eshell; runs 0.007 sec
alias | sed -E "s/^alias ([^=]+)='(.*)'$/alias \1 \2 \$*/g; s/'\\\''/'/g;" >~/.emacs.d/eshell/alias
