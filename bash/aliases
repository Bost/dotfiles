#!/bin/bash -ex
# -e stop on error; -x debug

Run() {
    echo "$@"
         "$@"
}

RunBg() {
    echo "$@ &"
         "$@" &
}

# On command line I wanna have vim
# Only git commit and git add need to do editing
RunGit() {
    #echo -e "before:\n EDITOR: $EDITOR\n ALTERNATE_EDITOR: $ALTERNATE_EDITOR\n VISUAL: $VISUAL"
    local e=$EDITOR
    local a=$ALTERNATE_EDITOR
    local v=$VISUAL
    unset EDITOR ALTERNATE_EDITOR VISUAL
    #echo -e "during:\n EDITOR: $EDITOR\n ALTERNATE_EDITOR: $ALTERNATE_EDITOR\n VISUAL: $VISUAL"
    Run $@
    EDITOR=$e
    ALTERNATE_EDITOR=$a
    VISUAL=$v
    #echo -e "after:\n EDITOR: $EDITOR\n ALTERNATE_EDITOR: $ALTERNATE_EDITOR\n VISUAL: $VISUAL"
}

alias reload='Run source $HOME/.bashrc'
     alias r='Run source $HOME/.bashrc'
alias t='Run tail'

CleanEclipseWorkspace() {
    METADA_CORE=.metadata/.plugins/org.eclipse.jdt.core
    Run rm -rf .metadata/.plugins/org.eclipse.core.resources/.history
    Run rm $METADA_CORE/*.index $METADA_CORE/savedIndexNames.txt
}
alias clean-ws='CleanEclipseWorkspace'
alias unexport='unset'
alias envp='env | grep ^PATH='

alias v='vim'
alias cls='clear'

PsEfGrep() {
    if [ "$isLinux" -gt 0 ]; then
        Run pgrep --list-full $@
    else
        echo "ps -ef | grep $@"
              ps -ef | grep $@
    fi
}
alias prep='PsEfGrep'

ExtractBashComments() {
    egrep "^#"
# Usage:
# cat myscript.sh | ExtractBashComments | wc
# comments=$(ExtractBashComments < myscript.sh)
}

#ping -c 5 www.google.com
 alias png='Run mtr google.com'
alias mtrg='Run mtr google.com'

alias c='Run cat'
alias less='Run less -r'
#alias rm='rm -i'
alias whence='Run type -a'
#alias ls='ls --color=auto'
alias dir='ls --color=auto --format=vertical'
#alias dir='dir --color=auto'
alias vdir='ls --color=auto --format=long'
#alias vdir='vdir --color=auto'

alias ..='Run cd ..'
alias ...='Run cd ../..'
alias ....='Run cd ../../..'

alias cd..='Run cd ..'
alias cd...='Run cd ../..'

alias cd-='Run cd -'
alias cdd='Run cd -'

alias gap='RunGit git add -p'
alias gad='RunGit git add'
alias gdd='RunGit git add'
alias glg='Run git log'
alias gaa='RunGit git add .'
 alias gg='RunBg git gui'
alias gtg='Run git tag'
alias gcp='Run git cherry-pick'
alias gbr='Run git branch'
alias gbrm='Run git branch -m'
alias gbrd='Run git branch -d'
alias gmv='Run git mv'
alias grm='Run git rm'
alias ghe='Run git help'

GrepFind() {
    echo "grep -lir '$1' $\(find . -name '*.$2'\)"
    echo "###"
    if [ $# -eq 2 ] ; then
        foundFiles=$(find . -name \*.$2)
        # echo "foundFiles: "$foundFiles
        grep -lir $1 $foundFiles
    fi
}
alias gf='GrepFind'

#GitRebaseContinue() {
    #git fetch # can never fail with a conflict
    #git ff    # tries to fast-forward
    ## if fast-forward fails, then
    #git rebase origin/upstreambranch

    # --continue: conflict resolving per commit basis not everything-at-once
#    echo git rebase --continue
#         git rebase --continue
    # use: 'git rebase --abort && git pull' if 'git rebase --continue' fails then use:

    # you can set up your git config to always rebase when pulling.
    #   git config master.rebase true
    # sets it up for master of the current repo
    #   git config --global branch.autosetuprebase always
#}

 alias gr='RunGit git rebase'
alias grb='RunGit git rebase'
alias gri='RunGit git rebase --interactive'
alias grc='Run git rebase --continue'
alias gra='Run git rebase --abort'
alias grs='Run git rebase --skip'
alias gdf='Run git diff'

 alias gh='Run git push'
alias gho='Run git push origin'

GitPullRebase() {
    Run git pull --rebase origin $@ && \
    Run git fetch --tags
}
alias gl='Run git pull'
alias glo='GitPullRebase'
alias glu='Run git pull --rebase upstream master'

alias gbis='Run git bisect start'
alias gbir='Run git bisect reset'
alias gbb='Run git bisect bad'
alias gbg='Run git bisect good'

alias gla='git lg-all'
alias glh='git lg-head'
 alias lg='git lg-head'

alias gk='RunBg gitk --all'
#alias gitk='RunBg gitk --all'

GitSearchStr () {
    # Search for a string in all revisions of entire git history
    git rev-list --all | (
        while read revision; do
            #git grep -F 'Your search string' $revision
            git grep -F '$1' $revision
        done
    )
}
alias gstr='GitSearchStr'

# ltree: colored tree with 'less'. --RAW-CONTROL-CHARS == -R
ltree () {
    tree -C $@ | less --RAW-CONTROL-CHARS
}

# TODO TreeNonIgnored should take .gitignore as input
TreeNotIgnored () {
    echo "tree | grep -v 'class\|.*~'"
          tree | grep -v 'class\|.*~'
}
alias trn='TreeNotIgnored'
alias tn='TreeNotIgnored'

findreplace () {
    printf "Search: ${1}\n"
    printf "Replace: ${2}\n"
    printf "In: ${3}\n\n"

    find . -name "*${3}" -type f | xargs perl -pi -e 's/${1}/${2}/g'
}

extract() {
    if [ -f "$1" ] ; then
      case $1 in
        *.tar.bz2)
              Run tar xjf $1
              ;;
        *.tar.gz)
              Run tar xzf $1
              ;;
        *.bz2)
              Run bunzip2 $1
              ;;
        *.rar)
              Run unrar e $1
              ;;
        *.gz)
              Run gunzip $1
              ;;
        *.tar)
              Run tar xf $1
              ;;
        *.tbz2)
              Run tar xjf $1
              ;;
        *.tgz)
              Run tar xzf $1
              ;;
        *.zip)
              Run unzip $1
              ;;
        *.Z)
              Run uncompress $1
              ;;
        *.7z)
              Run 7z x $1
              ;;
        *)     echo "'$1' cannot be extracted via extract()" ;;
        esac
     else
         echo "'$1' is not a valid file"
     fi
}

findTextInAnyFile () {
    echo find . -name "$2" -exec grep -il "$1" {} \;
         find . -name "$2" -exec grep -il "$1" {} \;
}
alias ft='findTextInAnyFile'

# create a directory and change into it
mkdirAndCd() {
  echo mkdir -p \"$1\" \&\& cd \"$1\"
       mkdir -p  "$1"   &&  cd  "$1"
}
alias take='mkdirAndCd'

 alias lcc='Run lein cljsbuild clean'
 alias lco='Run lein cljsbuild once'
 alias lca='Run lein cljsbuild auto'
alias lcca='Run lein cljsbuild clean && Run lein cljsbuild auto'

GitUpdateAll() {
    _cd=$(pwd)
    echo 'pwd: '$_cd

    Run cd $dev/cheatsheet
    Run git pull --rebase origin # && Run git fetch --tags

    Run cd $dev/dotfiles
    Run git pull --rebase origin # && Run git fetch --tags

    if [ "$isCygwin_155" -gt 0 ]; then
        Run cd /cygdrive/h/dev/cheatsheet
        Run git pull --rebase origin # && Run git fetch --tags

        Run cd /cygdrive/h/dev/dotfiles
        Run git pull --rebase origin # && Run git fetch --tags
    fi
    cd $_cd
}
 alias ga='GitUpdateAll'
alias gua='GitUpdateAll'

GitPushRepo() {
    echo 'cd '$1' && git push'
          cd  $1  && git push
}

GitPushAll() {
    _cd=$(pwd)
    echo 'pwd: '$_cd
    GitPushRepo $dev/cheatsheet && GitPushRepo $dev/dotfiles
    cd $_cd
}
alias gha='GitPushAll'
#gpl_dotfiles='echo "$dev/dotfiles"; cd $dev/dotfiles && git pull'
#alias gps='cd $dotfilesHOME/vim-pathogen && git submodule foreach git pull origin master'

alias gcl='Run git clone'
alias gau='RunGit git add --update'
alias gau='RunGit git add -p'
alias gss='Run git status --short'
 alias gs='Run git status --short'
alias gst='Run git status'
alias gco='Run git checkout'
alias gci='git commit'
alias gcianoe='Run git commit --amend --no-edit'
alias gcia='Run git commit --amend'
alias grh='Run git reset --hard'

#alias gdm='git diff master'
#alias gd='git diff | mate'
#alias gnp='git-notpushed'
#alias grm='git status | grep deleted | awk '

alias sc='script/console'
alias h5='history | tail -10 | head -5'
alias h='history'

HistoryGrep() {
    echo "history | grep $@"
          history | grep $@
}
alias hrep='HistoryGrep'
  alias hr='HistoryGrep'

AliasGrep() {
    echo "alias | grep $@"
          alias | grep $@
}
alias arep=AliasGrep

#alias tu='top -o cpu'
#alias tm='top -o vsize'
#alias r='rake'
#alias mkdir='nocorrect mkdir'
#alias cp='nocorrect cp'
alias md='Run mkdir -p'
#alias mv='nocorrect mv'
#alias where='command -v'
#alias ff='open -a Firefox'
#alias o='open . &'
#alias less='less -R'

#alias cp='cp -i'
#alias mv='mv -i'

# example:
# alias cvs-reset='cvs update -C -l -d -P "mbsgui/src/de/alldata/mbsgui/base/plugins/CreditKeyList.java" "mbsgui/src/de/alldata/mbsgui/base/plugins/CreditKeyList.java"'
alias cvs-reset='cvs update -C -l -d -P '
alias less='less -r'

# type: Display information about command type
alias whence='type -a'
alias dir='ls --color=auto --format=vertical'
alias vdir='ls --color=auto --format=long'

alias l="ls -lAh --color"    # -A does not print the . and .. entries
alias ll="ls -lA --color"
# show hidden files
alias l.='ls -d .* --color=auto'
#alias ls='ls -F --color=tty'
#alias l='ls -lAh'
#alias ls='ls -G'
#alias ls='ls -F --color=tty'
#alias ll='ls -lh'
#alias ll='ls -l'
#alias l='ls -CF'
#alias la='ls -A'

alias f='Run find'
alias cx='Run chmod +x'

#alias cp='cp -i'
#alias mv='mv -i'
#alias grep='grep --color'

if [ "$isLinux" -gt 0 ]; then
    :
    # --yes to all queries and do not prompt
    UpdateUpgradeClean() {
        echo "sudo apt-get update && sudo apt-get upgrade --yes && sudo apt-get clean"
              sudo apt-get update && sudo apt-get upgrade --yes && sudo apt-get clean
    }
    alias u='UpdateUpgradeClean'
    alias d='Run sudo apt-get dist-upgrade --yes'

      alias inst="Run sudo apt-get install --yes"
    alias uninst="Run sudo apt-get remove --yes"
       alias rmv="Run sudo apt-get remove --yes"
      alias armv="Run sudo apt-get autoremove --yes"

    alias reboot='Run sudo reboot'
    #    alias s='Run sudo pm-suspend'
       alias susp='Run sudo pm-suspend'
    alias suspend='Run sudo pm-suspend'
    #     alias h='Run sudo pm-hibernate'
          alias hib='Run sudo pm-hibernate'
    alias hibernate='Run sudo pm-hibernate'
         alias shut='Run sudo shutdown -h now'
    alias shutdown='Run sudo shutdown -h now'

    # Search the package list for a regex pattern
    # TODO alias sea='apt-cache search'

    alias clojure='Run java -cp $cljcp clojure.main'
    # !* - all args of the last command
    #alias gvim='RunBg gvim -c "call Maximize_Window()" --remote-silent'
    #alias gvim='RunBg gvim -c "call Maximize_Window()"'
    alias gvim='RunBg gvim'
    alias tmp='cd /tmp'

    alias music='cd $HOME/music/'
    # TODO check why did I install youtube-dl manually??? The current system version may work already 
    #alias y='echo ">>> youtube-dl istalled manually - check for system updates <<<";$HOME/bin/youtube-dl.new'
    alias y='Run youtube-dl'
    alias m='Run mplayer'
    alias lock="Run xflock4"
    alias k9='Run kill -9'

    # I guess '2> /dev/null' redirects errors to /dev/null
    #alias f='find ./ 2> /dev/null'
elif [ "$isCygwin_155" -gt 0 ]; then
    :
    #echo "### isCygwin_155: $isCygwin_155 ==> Loading $strCygwin_155"

    alias gvim='RunBg gvim'
    alias clojure='Run java -cp $(cygpath -p -w $cljcp) clojure.main'
elif [ "$isMinGw32_155" -gt 0 ]; then
    :
    #echo "### isMinGw32_155: $isMinGw32_155 ==> Loading $strMinGw32_155"

    RunGvim() {
        fname=$HOME/dev/dotfiles/.vimrc
        if [-f "$fname" ]; then
            echo "vimrc already renamed to .vimrc. Remove this if-else"
        else
            echo mv $HOME/dev/dotfiles/vimrc $fname
                 mv $HOME/dev/dotfiles/vimrc $fname
            echo "Remove this if-else"
        fi
        RunBg gvim -u $HOME/dev/dotfiles/.vimrc $@
    }
    #alias clojure='$winapp/clojure-1.4.0/clojure.sh'
elif [ "$isMinGw32_app1" -gt 0 ]; then
    :
    #echo "### isMinGw32_app1: $isMinGw32_app1 ==> Loading $strMinGw32_app1 aliases"

    alias clojure='java -cp $winapp/clojure-1.4.0/clojure-1.4.0.jar clojure.main'
else
    echo "ERROR: No environment detected"
fi

if [ "$isLinux" -eq 0 ]; then
    :
    #echo "### isLinux: $isLinux ==> Loading non-linux aliases"

    alias c:='cd $base/c'
    alias d:='cd $base/d'
    alias q:='cd $qDrive'

    alias rosv='cd $rosv'
    #alias conf='cd $rosv/mbs/conf'
    alias deployments='cd $deployments_mce'
    #alias scl='cd $dev/scl-directory'

    alias dem='cd $dev/mbs/dem'
    alias mce='cd $dev/mbs/mce'
    alias std='cd $dev/mbs/std'
    #alias bmw='cd $dev/mbs/bmw'
    #alias mbb='cd $dev/mbs/mbb'

    alias credit='cd $dev/credit'
    alias migr='cd $dev/credit.migration'
    alias full='cd $dev/jacarta.full'
    alias light='cd $dev/jacarta.light'
    alias hre='cd $dev/jacarta.hre'
    #alias pfandbrief='cd $dev/pfandbrief'

    #alias services='cd $dev/xml-services'
    #alias xml='cd $dev/xml-services'

    #alias prod='echo ssh rsvoboda@172.17.31.184; ssh rsvoboda@172.17.31.184'
    #alias abnt='echo ssh rsvoboda@172.17.31.185; ssh rsvoboda@172.17.31.185'
    alias prod='echo ssh rsvoboda@194.99.105.205; ssh rsvoboda@194.99.105.205'
    alias abnt='echo ssh rsvoboda@194.99.105.206; ssh rsvoboda@194.99.105.206'

    alias mbssum='$deployments_base/mbssum.sh'

    alias depl='mkdir -p $deployments_full/lib && mkdir -p $deployments_full/deploy; ls -la $deployments_full/..'
    alias tmp='cd $HOME/tmp/'
#else
#    echo "Linux aliases already loaded"
fi

cljcp=$clojureJarFile
cljcp=$cljcp:$dev/clojure-contrib/math.combinatorics-0.0.3.jar
cljcp=$cljcp:$dev/clojure-contrib/algo.monads-0.1.4.jar
cljcp=$cljcp:$dev/clojure-contrib/tools.macro-0.1.1.jar
cljcp=$cljcp:$dev/clojure-contrib/data.priority-map-0.0.2.jar
cljcp=$cljcp:$dev/clojure-contrib/core.cache-0.6.3.jar
cljcp=$cljcp:$dev/clojure-contrib/core.memoize-0.5.5.jar

alias g='RunGvim'
# this is a rather speculative $home location :)
alias home='cd $dev/..'

alias desktop='cd $HOME/desktop'
   alias desk='cd $HOME/desktop'

alias downloads='cd $HOME/downloads'
     alias down='cd $HOME/downloads'
alias catg='cd $HOME/downloads/category-theory/js'

alias cheatsheet='cd $dev/cheatsheet'
     alias cheat='cd $dev/cheatsheet'

alias dotfiles='cd $dev/dotfiles'
    alias dotf='cd $dev/dotfiles'
#alias dot='dot'  " /usr/bin/dot  filter for drawing directed graphs

alias bin='cd $HOME/bin'
alias hoch='cd $dev/hochzeit'
alias trackle='cd $dev/trackle'
alias zark='cd $dev/zark'
alias foo='cd $dev/foo'
alias dev='cd $dev'
# alias e doesn't work it there's no running emacs
 alias e='RunBg emacsclient'
alias ea='RunBg emacsclient $dev/dotfiles/bash/aliases'
alias ee='RunBg emacsclient $dev/dotfiles/bash/env'
alias ec='RunBg emacsclient $dev/dotfiles/bash/config'
alias eb='RunBg emacsclient $dev/dotfiles/.bashrc'
alias er='RunBg emacsclient $dev/dotfiles/.bashrc'
alias el='RunBg emacsclient $dev/dotfiles/linux-history.sh'

# Show which commands you use the most
alias freq='cut -f1 -d" " ~/.bash_history | sort | uniq -c | sort -nr | head -n 30'

# Clear terminal and empty scrollback
alias wipe='printf "\ec"'

alias sulast='sudo $(history -p !-1)'
#alias refunction='$EDITOR ~/.bash_functions && source ~/.bash_functions'

GeneratePassw() {
    #echo read -s pass; echo $pass | md5sum | base64 | cut -c -16
         #read -s pass; echo $pass | md5sum | base64 | cut -c -16
    # 30 character password
    echo "strings /dev/urandom | grep -o '[[:alnum:]]' | head -n 8 | tr -d '\n'; echo"
          strings /dev/urandom | grep -o '[[:alnum:]]' | head -n 8 | tr -d '\n'; echo
}
alias genpasswd='GeneratePassw'
# TODO is this for passing param to an alias?
#alias 'ps?'='ps ax | grep '

 alias ltm='RunBg $dev/LightTable-master/deploy/LightTable'
alias lttm='RunBg $dev/LightTable-master/deploy/LightTable'
 alias ltt='RunBg $dev/LightTable/deploy/LightTable'
alias plugins='Run cd $dev/LightTable/deploy/plugins'
 alias plugin='Run cd $dev/LightTable/deploy/plugins'
   alias plug='Run cd $dev/LightTable/deploy/plugins'
  alias my='Run cd $dev/LightTable/deploy/plugins/my'

alias vircurex='Run cd ~/vircurex'
    alias virc='Run cd ~/vircurex'
     alias vir='Run cd ~/vircurex'

alias convert='Run cd $dev/convert'
   alias conv='Run cd $dev/convert'

# TODO use 'pkill ltbin' instead of 'kill $(pidof ltbin)'
#alias klt='echo "kill \$(pidof ltbin)"; kill $(pidof ltbin)'
#alias klt='echo "kill \$(pidof ltbin)"; kill \$\(pidof ltbin\)'
alias klt='kill \$\(pidof ltbin\)'
alias blm='Run bash -x $dev/LightTable-master/linux_deps.sh'
alias bl='Run bash linux_deps.sh'
alias clt='cd $dev/LightTable'
alias lct='cd $dev/LightTable'   # too many lct typos
 alias lt='ls -lat'
alias ltr='ls -latr'
alias lff='ls -lrt -d -1 $PWD/{*,.*}'
 alias lT='ls -latr'

# last changed file
LastChangedFile() {
    echo "find . -printf '%T+ %p\n' | sort -r | head -1"
          find . -printf '%T+ %p\n' | sort -r | head -1
}
alias lcf='LastChangedFile'
alias he='head'
# TODO create alias file for the eshell; runs 0.007 sec
#alias | sed -E "s/^alias ([^=]+)='(.*)'$/alias \1 \2 \$*/g; s/'\\\''/'/g;" >~/.emacs.d/eshell/alias

# get ip addresses for every interface
getip() {
    /sbin/ifconfig | \
    grep -B1 "inet addr" | \
    awk '{ if ( $1 == "inet" ) { print $2 } else if ( $2 == "Link" ) { printf "%s:" ,$1 } }' | \
    awk -F: '{ print $1 ": " $3 }';
}
