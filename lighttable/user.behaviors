;; User behaviors
;; -----------------------------
;; Behaviors are stored as a set of diffs that are merged together
;; to create the final set of functionality that makes up Light Table. You can
;; modify these diffs to either add or subtract functionality.
;;
;; Behaviors are added to tags, objects with those tags then automatically gain
;; whatever logic the behavior imparts. To see a list of user-level behaviors,
;; start typing a word related to the functionality you want in between the square
;; brackets (e.g. "theme").

{:+ {
     ;; The app tag is kind of like global scope. You assign behaviors that affect
     ;; all of Light Table here
     :app [(:lt.objs.style/set-skin "dark")
           (:lt.objs.plugins/load-js "rainbow_compiled.js" true)]
     :editor.behaviors [:lt.plugins.rainbow/rainbow-parens]
     :editor.keymap [:lt.plugins.rainbow/rainbow-parens]
     :editor.clj [:lt.plugins.rainbow/rainbow-parens]
     :editor.cljs [:lt.plugins.rainbow/rainbow-parens]
     :editor.clj.instarepl [:lt.plugins.rainbow/rainbow-parens]

     ;; The editor tag is applied to all editors
     :editor [:lt.objs.editor/no-wrap
              ;(:lt.objs.style/font-settings "Ubuntu Mono" 13 1)
              (:lt.objs.style/font-settings "" 11 0.9)

              (:lt.objs.style/set-theme "ibdknox")
              (:lt.objs.editor/line-numbers)
              ; 'highlight-current-line' makes the editor slow
              ;::lt.objs.editor/highlight-current-line
              (:lt.plugins.vim/activate-vim)
              (:lt.plugins.vim/map-keys
               {
                "\\up" ":paredit.unwrap.parent" ;; (a b (c | d) e)  => (a b c | d e)
                "\\gl" ":paredit.grow.left" ;; (a b (c | d) e) => (a (b c | d))
                "\\gr" ":paredit.grow.right" ;; (a b (c | d) e) => (a b (c | d e))
                "\\sl" ":paredit.shrink.left"  ;; (a b (c | d) e) => (a b c | (d) e)
                "\\sr" ":paredit.shrink.right" ;; (a b (c | d) e) => (a b (c) | d e)
                "\\uf" ":paredit.move.up.forward" ;; (a b (c | d) e) => (a b (c d)| e)
                "\\ub" ":paredit.move.up.backward" ;; (a b (c | d) e) => (a b |(c d) e)
                "\\df" ":paredit.move.down.forward" ;; (a b | (c d) e) => (a b (|c d) e)
                "\\db" ":paredit.move.down.backward" ;; (a b (c d) | e) => (a b (c d|) e)

                "\\wr" ":ltexec paredit-plus.wrap-round"
                "\\ws" ":ltexec paredit-plus.wrap-square"
                "\\wc" ":ltexec paredit-plus.wrap-curly"
                "\\wq" ":ltexec paredit-plus.wrap-quote"  ;; fo|o => "foo"
                "\\bs" ":ltexec paredit-plus.splice-sexp-killing-backward"
                "\\fs" ":ltexec paredit-plus.splice-sexp-killing-forward"

                "\\x" ":ltexec editor.javascript.hints.result"
                })]

     ;; Here we can add behaviors to just clojure editors
     :editor.clojure [(:lt.objs.langs.clj/print-length 1000)]

     ; all objects with tag :opener behave such that they open README.md in standard-editor,
     ; when open-standard-editor behavior is triggered (i.e. when doing :open-standard-editor)
     ;:opener [(:lt.objs.opener/open-standard-editor "/home/bost/dev/fb/README.md")]

     ; TODO: open README.md when doing init
}

 ;; You can use the subtract key to remove behavior that may get added by
 ;; another diff
 :- {:app [:lt.objs.intro/show-intro
           ;:lt.objs.menu/create-menu
           ;:lt.objs.menu/set-menu
            ]
     ;:window [:lt.objs.menu/set-menu]
     ;:editor [:lt.objs.editor/highlight-current-line]
     ;:plugin.file [(:lt.objs.editor.file/on-save :build)]
     }
 }
