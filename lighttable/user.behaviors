;; User behaviors
;; -----------------------------
;; Behaviors are stored as a set of diffs that are merged together
;; to create the final set of functionality that makes up Light Table. You can
;; modify these diffs to either add or subtract functionality.
;;
;; Behaviors are added to tags, objects with those tags then automatically gain
;; whatever logic the behavior imparts. To see a list of user-level behaviors,
;; start typing a word related to the functionality you want in between the square
;; brackets (e.g. "theme").

{:+ {
     ;; The app tag is kind of like global scope. You assign behaviors that affect
     ;; all of Light Table here
     :app [(:lt.objs.style/set-skin "dark")
           (:lt.objs.plugins/load-js "rainbow_compiled.js" true)]
     :editor.behaviors [:lt.plugins.rainbow/rainbow-parens]
     :editor.keymap [:lt.plugins.rainbow/rainbow-parens]
     :editor.clj [:lt.plugins.rainbow/rainbow-parens]
     :editor.cljs [:lt.plugins.rainbow/rainbow-parens]
     :editor.clj.instarepl [:lt.plugins.rainbow/rainbow-parens]

     ;; The editor tag is applied to all editors
     :editor
     [(:lt.plugins.vim/map-keys
       {
        "\\up" ":ltexec paredit.unwrap.parent" ;; (a b c)  => a b c
        "\\gl" ":ltexec paredit.grow.left" ;; (a b (c | d) e) => (a (b c | d))
        "\\gr" ":ltexec paredit.grow.right" ;; (a b (c | d) e) => (a b (c | d e))
        "\\sl" ":ltexec paredit.shrink.left"  ;; (a b (c | d) e) => (a b c | (d) e)
        "\\sr" ":ltexec paredit.shrink.right" ;; (a b (c | d) e) => (a b (c) | d e)
        "\\uf" ":ltexec paredit.move.up.forward" ;; (a b (c | d) e) => (a b (c d)| e)
        "\\ub" ":ltexec paredit.move.up.backward" ;; (a b (c | d) e) => (a b |(c d) e)
        "\\df" ":ltexec paredit.move.down.forward" ;; (a b | (c d) e) => (a b (|c d) e)
        "\\db" ":ltexec paredit.move.down.backward" ;; (a b (c d) | e) => (a b (c d|) e)

        "\\wr" ":ltexec paredit-plus.wrap-round" ;; foo|oo => (foooo)
        "\\ws" ":ltexec paredit-plus.wrap-square" ;;foo|oo => [foooo]
        "\\wc" ":ltexec paredit-plus.wrap-curly" ;; foo|oo => {foooo}
        "\\wq" ":ltexec paredit-plus.wrap-quote" ;; foo|oo => "foooo"

        ;; (a (b c) | ) d  => d
        ;; (a (b c | ) ) d => (a   ) d
        "\\bs" ":ltexec paredit-plus.splice-sexp-killing-backward"

        "\\fs" ":ltexec paredit-plus.splice-sexp-killing-forward"

        ;; paredit.delete doesnt work
        ;; "\\dd" ":ltexec paredit.delete" ;; (a b (c | d) e) => (a (b c | d))
        "\\di" ":ltexec paredit-plus.delete-pair-contents" ;; (a (b c) d) =>  (a () d)

        "\\pk" ":ltexec paredit-plus.kill" ;; (def [x] | (f1 (f2 val))) => (def [x] |)
        ;; split & join
        "\\ss" ":ltexec paredit-plus.split-sexp" ;; (abc_def) => (abc)_(def)
        "\\js" ":ltexec paredit-plus.join-sexps" ;; (abc) def_ (ghi) => (abc def_ ghi)
        ;; select
        "\\sp" ":ltexec paredit.select.parent"
        "\\sc" ":ltexec paredit.select.clear" ;; doesnt work

        "\\x"  ":ltexec editor.javascript.hints.result"

        "``" ":ltexec lt.plugins.marks/jump-to-large-move-mark"
        "''" ":ltexec lt.plugins.marks/jump-to-last-edit-mark"
        })
      :lt.objs.editor/no-wrap
      ;(:lt.objs.style/font-settings "Ubuntu Mono" 13 1)
      (:lt.objs.console/font-settings "" 11 1)

      (:lt.objs.style/set-theme "ibdknox")
      (:lt.objs.editor/line-numbers)
      ; 'highlight-current-line' makes the editor slow
      ;::lt.objs.editor/highlight-current-line
      (:lt.plugins.vim/activate-vim)
      ]

     ;; Here we can add behaviors to just clojure editors
     :editor.clojure [(:lt.objs.langs.clj/print-length 1000)]

     :files [(:lt.objs.files/file-types [{:exts [:cljx],
                                          :mime "text/x-clojure",
                                          :name "CljX",
                                          :tags [:editor.clj :editor.clojure]}])]
     ; all objects with tag :opener behave such that they open README.md in standard-editor,
     ; when open-standard-editor behavior is triggered (i.e. when doing :open-standard-editor)
     ;:opener [(:lt.objs.opener/open-standard-editor "/home/bost/dev/fb/README.md")]

     ; TODO: open README.md when doing init
     }

 ;; You can use the subtract key to remove behavior that may get added by
 ;; another diff
 :- {:app [:lt.objs.intro/show-intro
           :lt.objs.menu/create-menu
           :lt.objs.menu/set-menu
           (:lt.objs.editor/line-numbers)

           ]
     ;:window [:lt.objs.menu/set-menu]
     ;:editor [:lt.objs.editor/highlight-current-line]
     ;:plugin.file [(:lt.objs.editor.file/on-save :build)]
     }
 }
