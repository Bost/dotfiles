;; -*- mode: scheme -*-

(format #t "~a ... " (string-append "Evaluating " (getenv "HOME") ".guile"))

(cond ((false-if-exception (resolve-interface '(ice-9 readline)))
       =>
       (lambda (module)
         ;; Enable completion and input history at the REPL.
         ((module-ref module 'activate-readline))))
      (else
       (display "Consider installing the 'guile-readline' package for
convenient interactive line editing and input history.\n\n")))

(unless (getenv "INSIDE_EMACS")
  (cond ((false-if-exception (resolve-interface '(ice-9 colorized)))
         =>
         (lambda (module)
           ;; Enable completion and input history at the REPL.
           ((module-ref module 'activate-colorized))))
        (else
         (display "Consider installing the 'guile-colorized' package
for a colorful Guile experience.\n\n"))))

;; See https://guix.gnu.org/manual/devel/en/guix.html#Using-Guix-Interactively
(use-modules
 (ice-9 readline)
 (ice-9 colorized)

 ;; Help at the REPL (guile console/interpreter)
 ;; https://www.draketo.de/proj/guile-basics/#sec-2-5
 ;; (texinfo reflection) ;; (help append) doesn't work; ,d append does, ugh.
 )
(activate-readline)
(activate-colorized)

(format #t "done\n")

;; (add-to-load-path "~/.guix-profile/share/guile/site/3.0/")

