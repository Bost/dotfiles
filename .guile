;; -*- mode: scheme -*-

;; (format #t "~a ... " (format #f "Evaluating ~a/.guile" (getenv "HOME")))

;; Help at the REPL (guile console/interpreter)
;; https://www.draketo.de/proj/guile-basics/#sec-2-5
;; (texinfo reflection) ;; (help append) doesn't work; ,d append does, ugh.

;; See https://guix.gnu.org/manual/devel/en/guix.html#Using-Guix-Interactively
(unless (getenv "INSIDE_EMACS")
;;; Mapping over a list of modules is just too much of a hassle, because:
;;; 1. The display-messages are different
;;; 2. The "active-<module>" string must be created and turned into a symbol
;;; etc.
  (cond ((false-if-exception (resolve-interface '(ice-9 readline)))
         =>
         (lambda (module)
           ((module-ref module 'activate-readline))))
        (else
         (display "Consider installing the 'guile-readline' package for
convenient interactive line editing and input history.\n\n")))
  (cond ((false-if-exception (resolve-interface '(ice-9 colorized)))
         =>
         (lambda (module)
           ((module-ref module 'activate-colorized))))
        (else
         (display "Consider installing the 'guile-colorized' package
for a colorful Guile experience.\n\n"))))

;; (format #t "done\n")

;; (add-to-load-path "~/.guix-profile/share/guile/site/3.0/")
