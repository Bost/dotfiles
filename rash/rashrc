#! /usr/bin/env racket
;; emacs - set major mode: SPC h M racket-mode
;; (require rash/demo/demo-rc)

(current-repl-display-startup-hints? #f)

(require racket/string
         racket/function
         linea/line-macro
         shell/pipeline-macro
         (only-in shell/pipeline path-string-symbol?)
         racket/contract/base
         racket/contract/region
         ;; shell/utils/bourne-expansion-utils ; needed?
         ;; needed?
         ;; (for-syntax
         ;;  racket/base
         ;;  syntax/parse
         ;;  )
         )

(require racket/string)
(require racket/function)
(require racket/format)
(require racket/runtime-path)
(require racket/port)

(require rash/demo/setup) ;; defines in-dir

(define-simple-pipeline-alias l    ls -la --color=auto)
(define-simple-pipeline-alias lock xflock4)

(define/contract (change-directory dir)
  (-> path-string-symbol? void?)
  (let ([ps (if (symbol? dir) (symbol->string dir) dir)])
    (if (directory-exists? ps)
        (current-directory ps)
        (error 'change-directory (format "directory doesn't exist: ~a" ps)))))

(define-line-macro ff
  (λ (_)
    #'(change-directory (string-append (getenv "HOME")
                                       "/.config/fish/functions"))))

(define-line-macro rr
  (λ (_)
    #'(change-directory (string-append (getenv "HOME")
                                       "/.config/rash"))))

(define-line-macro dev
  (λ (_)
    #'(change-directory (string-append (getenv "HOME")
                                       "/dev"))))

(define-line-macro dotf
  (λ (_)
    #'(change-directory (string-append (getenv "HOME")
                                       "/dev/dotf"))))
(define-line-macro cheat
  (λ (_)
    #'(change-directory (string-append (getenv "HOME")
                                       "/dev/cheat"))))

;; '     adds quote
;; `     adds quasiquote
;; ,     adds unquote
;; ,@    adds unquote-splicing
;; #'    adds syntax
;; #`    adds quasisyntax
;; #,    adds unsyntax
;; #,@   adds unsyntax-splicing

(require racket/undefined)

#;(require xrepl) ; interactive exploration and development

;; &bg is a background pipeline flag - like & in bash
#;(define-line-macro ee
  (lambda (stx)
    (syntax-parse stx
      [(_)          #'(run-pipeline =unix-pipe= emacs -q "./" &bg)]
      [(_ arg ...)  #'(run-pipeline =unix-pipe= emacs -q arg ... &bg)]
      )))

;; lambda not surrounded by brackets accepts any number of args, and the args
;; are put into a list bound to my-echo
;; https://docs.racket-lang.org/guide/lambda.html
(define my-echo (lambda args (displayln (string-join (map ~a args) " "))))
#;(define (my-echo args) (displayln (string-join (map ~a args) " ")))

(define launch
  (lambda args
    #;(run-pipeline =unix-pipe= emacs -q $args &bg)
    {emacs -q $args &bg}
    ))

(define-line-macro e
  (lambda (stx)
    (syntax-parse stx
      [(_)          #'(launch "./")]
      [(_ arg ...)  #'(launch arg ...)]
      )))
