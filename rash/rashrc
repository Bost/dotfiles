#! /usr/bin/env racket
;; emacs - set major mode: SPC h M racket-mode

;; rashrc is NOT a module, and gets none of them. rashrc is mainly there to let
;; you muck up the namespace that you use interactively. Prefer rashrc.rkt
;; @secref["Interactive_Use" #:doc '(lib "rash/scribblings/rash.scrbl")]
(current-repl-display-startup-hints? #f)

;; TODO switch off `git status` when changing dirs
;; TODO read-in all *.rkt files in ~/.config/rash; not just rashrc, rashrc.rkt

;; (displayln "rashrc")

(require
 linea/line-macro
 (only-in shell/pipeline path-string-symbol?)
 racket/contract/base
 racket/contract/region
 racket/string
 racket/list
 rackjure        ;; raco pkg install rackjure
 #;typed/racket    ;; TODO  racket/undefined
 ;; rash/demo/setup ;; in-dir macro, my-grep etc.
 )

;; TODO pasteboard%

;; raco pkg install describe
;; (require describe)
;; (describe (sqrt 10))

;; Mark Engelberg: racket vs. clojure
;; http://programming-puzzler.blogspot.com/2010/08/racket-vs-clojure.html
;; immutable vectors:
;; http://programming-puzzler.blogspot.com/2010/08/racket-vs-clojure.html
;; generic collections:
;; https://docs.racket-lang.org/collections/index.html

;; https://docs.racket-lang.org/guide/intro.html
;; https://docs.racket-lang.org/racket-cheat/index.html
;; https://github.com/greghendershott/racket-clojure-cheat-sheet
;; https://www.greghendershott.com/2015/08/at-expressions.html
(define-line-macro            dev   (lambda (_) #'(cd "~/dev")))

(require racket/block)
(define (cd-notes)
  (block
   (cd "~/dev/notes")
   (let ([dir "~/anaconda3/bin"]
         [path (getenv "PATH")])
     (if (string-contains? path dir)
         (displayln (str "PATH contains '" dir "' already"))
         (block
          (putenv "PATH" (str dir ":" path))
          (displayln (str "PATH prepended by '" dir "'")))))))

(define-line-macro            notes (lambda (_) #'(cd-notes)))
(define-line-macro            ema   (lambda (_) #'(cd "~/dev/emacs")))
(define-line-macro            ff    (lambda (_) #'(cd "~/dev/dotfiles/fish/functions")))
(define-line-macro            rr    (lambda (_) #'(cd "~/dev/dotfiles/rash")))
(define-line-macro            dotf  (lambda (_) #'(cd "~/dev/dotfiles")))
(define-line-macro            cheat (lambda (_) #'(cd "~/dev/cheat")))
(define-line-macro            dec   (lambda (_) #'(cd "~/dec")))
(define-line-macro            utils (lambda (_) #'(cd "~/dec/utils")))
(define-line-macro            ufo   (lambda (_) #'(cd "~/dec/ufo")))
(define-line-macro            zark  (lambda (_) #'(cd "~/dec/zark")))
(define-line-macro            tmp   (lambda (_) #'(cd "/tmp")))
(define-line-macro            bin   (lambda (_) #'(cd "~/bin")))
(define-line-macro            spa   (lambda (_) #'(cd "~/.emacs.d")))

;; TODO test the extract function
(define (extract file)
    (match file
      [
       "*.tar.bz2"
       {echo tar xjf file}
       ]
      ["*.tar.gz"
       {echo tar xzf file}
       ;; if test $status -eq 2
       ;; echo "WARN: The archive is propably is a tar, not a GZip. Trying alterternative:"
       ;; set cmd tar xvf $file
       ;; end
       ]

      ["*.bz2"
       {echo bunzip2 file}]
      ))

;; '     adds quote
;; `     adds quasiquote
;; ,     adds unquote
;; ,@    adds unquote-splicing
;; #'    adds syntax
;; #`    adds quasisyntax
;; #,    adds unsyntax
;; #,@   adds unsyntax-splicing

#| racket block comment begin to end |#

;; \|    =unix-pipe=
;; |>    send the result of the previous pipeline segment to a Racket function.
;; \|>   =basic-object-pipe=
;; |>>   =object-pipe=

;; #%   see http://willghatch.net/publications/rash-gpce-2018-preprint.pdf

;; (define x 1234)
;; ;; Now let's see the value of x.
;; ;; We can't just write `x`, but we can do any of these:
;; (values x)
;; |> values x
;; echo $x
;; (require rash/demo/setup)
;; val x

;; {} brace-form
;; Braces read a block of code in line mode. Braces can be used in line mode as
;; this example shows, or they can be used inside parenthesised S-expressions to
;; escape back to line mode. Braces implicitly act like Racket’s begin form,
;; which evaluates its sub-forms, in this case, lines, sequentially.

;; #{}   hash-brace-form
;; - implicitly set subprocess input to an empty port, converts subprocess
;;   output to a string, and trims trailing whitespace from it.

;; #%hash-braces parameterizes the default input, output, and error redirection
;; for the run-pipeline macro and executes its sub-form

;; produces the same result as a ⟨brace-form⟩, except that it is wrapped in a list
;; prefixed with #%hash-braces.

;; TODO see typed/racket
;; https://docs.racket-lang.org/ts-guide/quick.html?q=racket%20typed
#|
(define type
  (lambda (x)
    (cond ((number? x) "Number")
          ((pair? x) "Pair")
          ((string? x) "String")
          ((list? x) "List")
          ;; TODO 'symbol #:keyword ?vector?
          ;; (else undefined)
          )))

(define empty?
  (lambda (x)
    (cond ((string? x) (string=? "" x))
          ((list? x) (empty? x))
          ;; (else undefined)
          )))

(define eq-test
  (lambda (x)
    (cond ((eq? x #t) "yes")
          ((eq? x #f) "no")
          (else "else"))))

#;(require xrepl) ; interactive exploration and development

;; lambda not surrounded by brackets accepts any number of args, and the args
;; are put into a list bound to my-echo
;; https://docs.racket-lang.org/guide/lambda.html
(define my-echo (lambda args (displayln (string-join (map ~a args) " "))))
#;(define (my-echo args) (displayln (string-join (map ~a args) " ")))
|#

;;; contains? : return true if list contains a given element
(define (contains? elem lst) (number? (index-of lst elem)))

;; from rash/demo/with-transactional-file-list.rkt
#;(define-line-macro try
  (syntax-parser [(_ body (~datum catch) catch-body)
                  #'(with-handlers ([(lambda (e) #t) (lambda (e) catch-body)])
                      body)]))

(define (pgrep-fn)
  #;(try   { (str #{pgrep --exact emacs}) }
     catch { (str "") } )
  #;(with-handlers ([predicate-expr handler-expr ] ...)
      body ...+)
  (with-handlers ([(lambda (e) #t) ;; predicate - i.e. handle any exception
                   (lambda (e) "") ;; handler
                   ])
    #{pgrep --exact emacs}))

(define (emacs-processes)
  (let* ([pids-str (pgrep-fn)]
         [pids (string-split pids-str)])
    (map (lambda (pid)
           (let* ([proc-user #{ps -o user= -p $pid}])
             (if (equal? (getenv "USER") proc-user)
                 (let* ([proc-cmd #{ps -o command= -p $pid}])
                   (if (string-contains? proc-cmd "defunct")
                       'zombie
                       'emacsclient))
                 'emacs)))
         pids)))

(define launch-emacs
  (lambda args
    ;; &bg is a background pipeline flag - like & in bash
    #;(run-pipeline =unix-pipe= emacs -q $args &bg)
    (let ([emacs-cmd (if (contains? 'emacsclient (emacs-processes))
                         'emacsclient
                         'emacs)])
      #{$emacs-cmd $args &bg})))

(define-line-macro e
  (lambda (stx)
    (syntax-parse stx
      [(_)          #'(launch-emacs "./")]
      [(_ arg ...)  #'(launch-emacs `arg ...)])))

(define-line-macro ghog
  (lambda (stx)
    (syntax-parse stx
      [(_ arg ...) #'(map (lambda (remote)
                            {git push --verbose $remote `arg ...})
                          '(origin gitlab))])))


;; (define-simple-pipeline-alias reinst sudo apt --reinstall install --yes)
#;(define launch-inst
    (lambda args
      (if (string-suffix? args ".deb")
          ;; TODO test installation of multiple deb files
          #{sudo dpkg --install $args}
          #{sudo snap install $args}

          #{sudo apt install --yes $args})))

(define-line-macro inst
  (lambda (stx)
    (syntax-parse stx
      [(_ arg)  #'(launch-inst `arg)])))

#;(with-rash-config
    #:out (compose string-trim port->string)
    #:err (displayln 'error)
    {apt show foo}
    #;{grep -i "computer store" purchases.csv \
            | wc -l})

;; redirect
;; cat *.fish &> files.fish

(define launch-bat
  (lambda (args)
    (with-rash-config
      {
       bat $args
       echo ""
       echo ";; See https://www.root.cz/clanky/nahrada-utility-cat-nastrojem-bat-a-ccat/"
       })))

(define-line-macro c
  (lambda (stx)
    (syntax-parse stx
      [(_ arg ...)  #'(launch-bat `arg ...)])))


(define (simple-grep pattern fnames)
  (let* ([files (map (lambda (fname)
                       (str (getenv "HOME") "/" fname))
                     fnames)])
    ;; (displayln files)
    (with-rash-config
      { grep --color=auto --ignore-case $pattern $files })))

(define (cheat-grep pattern fnames)
  (let* ([files (map (lambda (fname)
                       (str (getenv "HOME") "/" fname))
                     fnames)]
         ;; .+\n(.*\n)+?(\n|\z)
         [split-re '".+\\n(.*\\n)+?(\\n|\\z)"])
    ;; (displayln files)
    (with-rash-config
      { grep -Pzoh $split-re $files | grep --color=auto -Pzie $pattern
        echo "####################### See also http://cb.vu/unixtoolbox.xhtml"
        })
    #;(run-pipeline =unix-pipe= grep -Pzoh $split-re $files
                    =unix-pipe= grep --color=auto -Pzie $patter)))

(define-line-macro crl
  (lambda (stx)
    (syntax-parse stx
      [(_ arg) #'(cheat-grep `arg '(
                                    dev/cheat/cmds/emacs.el
                                    dev/cheat/cmds/vim.vim
                                    dev/cheat/cmds/shells.sh
                                    dev/cheat/cmds/linux.sh
                                    dev/cheat/cmds/rest.sh
                                    dev/cheat/cmds/findgrep.sh
                                    dev/cheat/cmds/systemd.sh
                                    dev/cheat/cmds/git.sh
                                    dev/cheat/cmds/packaging.sh
                                    ))])))

(define-line-macro cre
  (lambda (stx)
    (syntax-parse stx
      [(_ arg) #'(cheat-grep `arg '(dev/cheat/cmds/emacs.el))])))

(define-line-macro crf
  (lambda (stx)
    (syntax-parse stx
      [(_ arg) #'(cheat-grep `arg '(dev/cheat/cmds/findgrep.sh))])))

(define-line-macro crg
  (lambda (stx)
    (syntax-parse stx
      [(_ arg) #'(cheat-grep `arg '(dev/cheat/cmds/git.sh))])))

(define-line-macro crn
  (lambda (stx)
    (syntax-parse stx
      [(_ arg) #'(cheat-grep `arg '(
                                    dev/notes/category-theory.md
                                    dev/notes/computer-sciences.md
                                    dev/notes/logics.org
                                    dev/notes/math.org
                                    dev/notes/notes.org
                                    dev/notes/math-structures.md
                                    ))])))
(define-line-macro cru
  (lambda (stx)
    (syntax-parse stx
      [(_ arg) #'(simple-grep `arg '(dev/cheat/cmds/utf8.txt))])))

(define-line-macro crv
  (lambda (stx)
    (syntax-parse stx
      [(_ arg) #'(cheat-grep `arg '(dev/cheat/cmds/vim.vim))])))
