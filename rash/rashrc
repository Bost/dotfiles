#! /usr/bin/env racket
;; emacs - set major mode: SPC h M racket-mode
;; (require rash/demo/demo-rc)

(current-repl-display-startup-hints? #f)

(require
 linea/line-macro
 (only-in shell/pipeline path-string-symbol?)
 racket/contract/base
 racket/contract/region
 racket/string
 racket/list
 rackjure      ;; raco pkg install rackjure
 )

(define-simple-pipeline-alias l    ls -la --color=auto)
(define-simple-pipeline-alias lock xflock4)

;; TODO pasteboard%

;; raco pkg install describe
;; (require describe)
;; (describe (sqrt 10))

;; Mark Engelberg: racket vs. clojure
;; http://programming-puzzler.blogspot.com/2010/08/racket-vs-clojure.html
;; immutable vectors:
;; http://programming-puzzler.blogspot.com/2010/08/racket-vs-clojure.html
;; generic collections:
;; https://docs.racket-lang.org/collections/index.html

;; https://docs.racket-lang.org/guide/intro.html
;; https://docs.racket-lang.org/racket-cheat/index.html
;; https://github.com/greghendershott/racket-clojure-cheat-sheet
;; https://www.greghendershott.com/2015/08/at-expressions.html
(define-line-macro notes (λ (_) #'(cd "~/dev/notes")))
(define-line-macro utils (λ (_) #'(cd "~/dec/utils")))
(define-line-macro ufo   (λ (_) #'(cd "~/dec/ufo")))
(define-line-macro zark  (λ (_) #'(cd "~/dec/zark")))
(define-line-macro spa   (λ (_) #'(cd "~/.emacs.d")))
(define-line-macro ema   (λ (_) #'(cd "~/dev/emacs")))
(define-line-macro ff    (λ (_) #'(cd "~/dev/dotfiles/fish/functions")))
(define-line-macro rr    (λ (_) #'(cd "~/dev/dotfiles/rash")))
(define-line-macro dev   (λ (_) #'(cd "~/dev")))
(define-line-macro dec   (λ (_) #'(cd "~/dec")))
(define-line-macro dotf  (λ (_) #'(cd "~/dev/dotfiles")))
(define-line-macro cheat (λ (_) #'(cd "~/dev/cheat")))

;; '     adds quote
;; `     adds quasiquote
;; ,     adds unquote
;; ,@    adds unquote-splicing
;; #'    adds syntax
;; #`    adds quasisyntax
;; #,    adds unsyntax
;; #,@   adds unsyntax-splicing

#| racket block comment begin to end |#

;; \|    =unix-pipe=
;; |>    send the result of the previous pipeline segment to a Racket function.
;; \|>   =basic-object-pipe=
;; |>>   =object-pipe=

;; #%   see http://willghatch.net/publications/rash-gpce-2018-preprint.pdf

;; (define x 1234)
;; ;; Now let's see the value of x.
;; ;; We can't just write `x`, but we can do any of these:
;; (values x)
;; |> values x
;; echo $x
;; (require rash/demo/setup)
;; val x

;; {} brace-form
;; Braces read a block of code in line mode. Braces can be used in line mode as
;; this example shows, or they can be used inside parenthesised S-expressions to
;; escape back to line mode. Braces implicitly act like Racket’s begin form,
;; which evaluates its sub-forms, in this case, lines, sequentially.

;; #{}   hash-brace-form
;; - implicitly set subprocess input to an empty port, converts subprocess
;;   output to a string, and trims trailing whitespace from it.

;; #%hash-braces parameterizes the default input, output, and error redirection
;; for the run-pipeline macro and executes its sub-form

;; produces the same result as a ⟨brace-form⟩, except that it is wrapped in a list
;; prefixed with #%hash-braces.

(define type
  (lambda (x)
    (cond ((number? x) "Number")
          ((pair? x) "Pair")
          ((string? x) "String")
          ((list? x) "List"))))

#;(require xrepl) ; interactive exploration and development

;; &bg is a background pipeline flag - like & in bash
#;(define-line-macro ee
  (lambda (stx)
    (syntax-parse stx
      [(_)          #'(run-pipeline =unix-pipe= emacs -q "./" &bg)]
      [(_ arg ...)  #'(run-pipeline =unix-pipe= emacs -q arg ... &bg)]
      )))

;; lambda not surrounded by brackets accepts any number of args, and the args
;; are put into a list bound to my-echo
;; https://docs.racket-lang.org/guide/lambda.html
(define my-echo (lambda args (displayln (string-join (map ~a args) " "))))
#;(define (my-echo args) (displayln (string-join (map ~a args) " ")))

;;; contains? : return true if list contains a given element
(define (contains? elem lst) (number? (index-of lst elem)))

(define (emacs-processes)
  (let* ([pids-str #{pgrep --exact emacs}]
         [pids (string-split pids-str)])
    (map (lambda (pid)
           (let* ([proc-user #{ps -o user= -p $pid}])
             (if (equal? (getenv "USER") proc-user)
                 (let* ([proc-cmd #{ps -o command= -p $pid}])
                   (if (string-contains? proc-cmd "defunct")
                       'zombie
                       'emacsclient))
                 'emacs)))
         pids)))

(define launch
  (lambda args
    #;(run-pipeline =unix-pipe= emacs -q $args &bg)
    (let ([emacs-cmd (if (contains? 'emacsclient (emacs-processes))
                   'emacsclient
                   'emacs)])
      #{$emacs-cmd $args &bg})))

(define-line-macro e
  (lambda (stx)
    (syntax-parse stx
      [(_)          #'(launch "./")]
      [(_ arg ...)  #'(launch `arg ...)])))

#;(define launch-inst
  (lambda args
    (if (string-suffix? args ".deb")
        ;; TODO test installation of multiple deb files
        #{sudo dpkg --install $args}
        #{sudo snap install $args}

        #{sudo apt install --yes $args})))

(define-line-macro inst
  (lambda (stx)
    (syntax-parse stx
      [(_ arg)  #'(launch-inst `arg)])))

;; (require rash/demo/with-transactional-file-list)

(require rash/demo/setup)

;; in-dir /tmp {
;;   try {
;;    apt show foobar
;;    }
;;   catch e
;;   {
;;    echo An error occured!
;;    echo $f could not be deleted!
;;    }
;;  }

#;(with-rash-config
  #:out (compose string-trim port->string)
  #:err string-trim
  {apt show foo})

#;(with-rash-config
  #:out (compose string-trim port->string)
  #:err (displayln "error")
  {apt show foo}
  #;{grep -i "computer store" purchases.csv \
        | wc -l})

#;(with-rash-config
  #:out (compose string-trim port->string)
  #:err ("/tmp/error.txt" 'append)
    {apt show foo})
